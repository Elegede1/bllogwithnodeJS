<%- include('./partials/head.ejs') %>
<link rel="stylesheet" href="/public/css/chat.css" />
<body>
    <%- include('partials/nav') %>

    <div class="container mt-5">
        <h2>Chat Room - Welcome <%= user.name %></h2>
        <h2>Chat - Welcome <%= user.name %> (<a href="/users/search">Find Users</a>)</h2>
        <%- include('partials/messages') %>
        <div class="row">
            <div class="col-md-3">
                <h4>Users</h4>
                <ul id="user-list" class="list-group">
            <div class="col-md-4">
                <!-- Direct Messages List -->
                <h5>Direct Messages</h5>
                <ul id="user-list" class="list-group mb-3" style="max-height: 200px; overflow-y: auto;">
                    <% if (locals.otherUsers && otherUsers.length > 0) { %>
                        <% otherUsers.forEach(function(otherUser) { %>
                            <li class="list-group-item user-list-item" data-userid="<%= otherUser._id %>" data-username="<%= otherUser.name %>">
                                <%= otherUser.name %>
                            <li class="list-group-item chat-list-item" data-chattype="private" data-chatid="<%= otherUser._id %>" data-chatname="<%= otherUser.profile && otherUser.profile.name ? otherUser.profile.name : otherUser.name %>">
                                <%= otherUser.profile && otherUser.profile.name ? otherUser.profile.name : otherUser.name %>
                            </li>
                        <% }); %>
                    <% } else { %>
                        <li class="list-group-item">No other users available.</li>
                        <li class="list-group-item">No other users for direct chat.</li>
                    <% } %>
                </ul>

                <!-- Group Chats List -->
                <h5>Group Chats</h5>
                <ul id="group-list" class="list-group mb-3" style="max-height: 200px; overflow-y: auto;">
                     <% if (locals.groupChats && groupChats.length > 0) { %>
                        <% groupChats.forEach(function(group) { %>
                            <li class="list-group-item chat-list-item" data-chattype="group" data-chatid="<%= group._id %>" data-chatname="<%= group.name %>">
                                <%= group.name %>
                                <% if (group.lastMessage && group.lastMessage.text) { %>
                                    <br><small class="text-muted"><%= group.lastMessage.sender ? (group.lastMessage.sender.name || 'User') : 'User' %>: <%= group.lastMessage.text.substring(0, 20) %>...</small>
                                <% } %>
                            </li>
                        <% }); %>
                    <% } else { %>
                        <li class="list-group-item">No group chats yet.</li>
                    <% } %>
                </ul>

                <!-- Create Group Chat Form -->
                <div class="group-creation-form">
                    <h6>Create New Group</h6>
                    <form id="create-group-form" action="/chat/groups/create" method="POST">
                        <div class="form-group">
                            <label for="groupName" class="sr-only">Group Name</label>
                            <input type="text" class="form-control form-control-sm mb-2" id="groupName" name="groupName" placeholder="Group Name (Optional)">
                        </div>
                        <div class="form-group">
                            <label>Select Friends (min. 2 for a group of 3+):</label>
                            <div style="max-height: 150px; overflow-y: auto;">
                                <% if (locals.friends && friends.length > 0) { %>
                                    <% friends.forEach(function(friend) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="selectedFriends" value="<%= friend._id %>" id="friend-<%= friend._id %>">
                                            <label class="form-check-label" for="friend-<%= friend._id %>">
                                                <%= friend.profile && friend.profile.name ? friend.profile.name : friend.name %>
                                            </label>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p class="small text-muted">You have no friends to add to a group. <a href="/users/search">Find friends</a>.</p>
                                <% } %>
                            </div>
                        </div>
                        <% if (locals.friends && friends.length >= 2) { %> <!-- Enable button if enough friends exist -->
                           <button type="submit" class="btn btn-success btn-sm btn-block mt-2">Create Group</button>
                        <% } else if (locals.friends && friends.length > 0) { %>
                            <p class="small text-muted">You need at least 2 friends to create a group.</p>
                        <% } %>
                    </form>
                </div>
            </div>
            <div class="col-md-8">
                <div id="chat-area-header" class="mb-2">
                    <h5 id="chatting-with">Select a chat to start</h5>
                </div>
                <div id="chat-window">
                    <!-- Messages will appear here -->
                </div>
                <div id="chat-input-area" class="mt-2" style="display: none;">
                    <div class="input-group">
                        <input type="text" id="message-input" class="form-control" placeholder="Type a message...">
                        <div class="input-group-append">
                            <button id="send-button" class="btn btn-primary">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const currentUserId = "<%= user.id || user._id %>";
        const currentUserName = "<%= user.name %>";

        const socket = io({
            query: { userId: currentUserId, userName: currentUserName }
        });

        let activeChatId = null;
        let activeChatType = null; // 'private' or 'group'
        let activeChatName = null;

        const chatWindow = document.getElementById('chat-window');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const chatInputArea = document.getElementById('chat-input-area');
        const allChatListItems = document.querySelectorAll('.chat-list-item'); // Combined user and group list items
        const chattingWithHeader = document.getElementById('chatting-with');

        async function loadMessages(chatType, chatId) {
            chatWindow.innerHTML = '<p class="text-center text-muted small p-3">Loading messages...</p>';
            let url;
            if (chatType === 'private') {
                url = `/chat/users/${chatId}/messages`;
            } else if (chatType === 'group') {
                url = `/chat/groups/${chatId}/messages`;
            } else {
                return;
            }

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: 'Failed to parse error' }));
                    throw new Error(`HTTP error! status: ${response.status}, Message: ${errorData.message}`);
                }
                const messages = await response.json();
                chatWindow.innerHTML = ''; // Clear loading/previous messages
                messages.forEach(msg => displayMessage(msg, chatType));
                scrollToBottom();
            } catch (error) {
                console.error("Failed to load messages:", error);
                chatWindow.innerHTML = `<p class="text-center text-danger small p-3">Failed to load messages. ${error.message}</p>`;
            }
        }

        function displayMessage(data, messageType) {
            // data: { sender: {_id, name, profile, email}, content, createdAt, groupChat (if group) }
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');

            const senderNameDisplay = (data.sender && data.sender.profile && data.sender.profile.name) ? data.sender.profile.name : (data.sender ? data.sender.name : 'Unknown');
            const isMyMessage = data.sender && data.sender._id === currentUserId;

            if (isMyMessage) {
                messageDiv.classList.add('sent');
            } else {
                messageDiv.classList.add('received');
            }

            let senderPrefix = '';
            if (messageType === 'group' && !isMyMessage) { // Show sender name for group messages from others
                senderPrefix = `<div class="sender-name">${senderNameDisplay}</div>`;
            }
            
            const formattedTimestamp = data.createdAt ? new Date(data.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '';

            messageDiv.innerHTML = `${senderPrefix}${data.content}<span class="timestamp">${formattedTimestamp}</span>`;
            chatWindow.appendChild(messageDiv);
        }

        function scrollToBottom() {
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        allChatListItems.forEach(item => {
            item.addEventListener('click', () => {
                document.querySelectorAll('.chat-list-item.active-chat').forEach(active => active.classList.remove('active-chat'));
                item.classList.add('active-chat');
                item.style.fontWeight = 'normal'; // Reset bold on click

                activeChatType = item.dataset.chattype;
                activeChatId = item.dataset.chatid;
                activeChatName = item.dataset.chatname;

                chattingWithHeader.textContent = `${activeChatName} ${activeChatType === 'group' ? '(Group)' : ''}`;
                chatWindow.innerHTML = '';
                chatInputArea.style.display = 'flex';
                messageInput.focus();
                loadMessages(activeChatType, activeChatId);
            });
        });

        sendButton.addEventListener('click', ()_ => {
            const message = messageInput.value.trim();
            if (message && activeChatId && activeChatType) {
                const payload = { message: message };
                if (activeChatType === 'private') {
                    payload.recipientId = activeChatId;
                    socket.emit('private_message', payload);
                } else if (activeChatType === 'group') {
                    payload.groupId = activeChatId;
                    socket.emit('group_message', payload);
                }
                messageInput.value = '';
            }
        });

        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendButton.click();
            }
        });

        socket.on('private_message', (data) => {
            const isForCurrentChat = (activeChatType === 'private' &&
                                     ((data.sender && data.sender._id === activeChatId) || // Message from the person I'm chatting with
                                      (data.recipient && data.recipient === activeChatId && data.sender && data.sender._id === currentUserId))); // My own message to this person

            if (isForCurrentChat) {
                displayMessage(data, 'private');
                scrollToBottom();
            } else if (data.sender && data.sender._id !== currentUserId) {
                const notifyUserItem = document.querySelector(`.chat-list-item[data-chattype="private"][data-chatid="${data.sender._id}"]`);
                if (notifyUserItem) notifyUserItem.style.fontWeight = 'bold';
            }
        });

        socket.on('group_message', (data) => {
            // data: { sender: {_id, name}, content, createdAt, groupChat: 'groupIdString' }
            if (activeChatType === 'group' && data.groupChat && data.groupChat === activeChatId) {
                displayMessage(data, 'group');
                scrollToBottom();
            } else if (data.groupChat && (!data.sender || data.sender._id !== currentUserId)) {
                 const notifyGroupItem = document.querySelector(`.chat-list-item[data-chattype="group"][data-chatid="${data.groupChat}"]`);
                if (notifyGroupItem) {
                    notifyGroupItem.style.fontWeight = 'bold';
                    // You might want to update the last message preview here too
                }
            }
        });

        socket.on('user_not_found', (data) => {
            if (activeChatType === 'private' && data.recipientId === activeChatId) {
                const errorDiv = document.createElement('div');
                errorDiv.classList.add('alert', 'alert-warning', 'm-2', 'small');
                errorDiv.textContent = `User ${activeChatName || data.recipientId} is not online or could not be reached.`;
                chatWindow.appendChild(errorDiv);
                scrollToBottom();
            }
        });

        socket.on('message_error', (data) => {
            console.error("Message error from server:", data.error);
            const errorDiv = document.createElement('div');
            errorDiv.classList.add('alert', 'alert-danger', 'm-2', 'small');
            errorDiv.textContent = `Error: ${data.error}`;
            chatWindow.appendChild(errorDiv);
            scrollToBottom();
        });

        socket.on('connect', () => console.log('Connected to chat server:', socket.id));
        socket.on('disconnect', () => console.log('Disconnected from chat server'));

        // Auto-select chat if query param exists (e.g., after creating a group)
        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const groupIdFromParam = urlParams.get('group');
            const userIdFromParam = urlParams.get('user');

            let itemToClick = null;
            if (groupIdFromParam) {
                itemToClick = document.querySelector(`.chat-list-item[data-chattype="group"][data-chatid="${groupIdFromParam}"]`);
            } else if (userIdFromParam) {
                 itemToClick = document.querySelector(`.chat-list-item[data-chattype="private"][data-chatid="${userIdFromParam}"]`);
            }
            if (itemToClick) itemToClick.click();
        });

    </script>
    <%- include('partials/footer') %>
</body>